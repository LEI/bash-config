#!/usr/bin/env bash

# Usage: source bootstrap

# BOOTSTRAP="$(dirname "${BASH_SOURCE}")"
# BOOTSTRAP="$(cd "$(dirname "$0")"; pwd -P)"
BOOTSTRAP="${BOOTSTRAP:-$HOME/storage/shared/termux-config}"

# OS="$(echo $(uname -o 2>/dev/null || uname -s) | tr '[:upper:]' '[:lower:]')"
declare -l OS
OS="$(uname -o 2>/dev/null || uname -s)"

log() {
  # printf "%s" "${0##*/}: "
  printf "%s\n" "$@"
}

err() {
  local ret=$?
  >&2 log "$@"
  return $ret
}

has() {
  if ! hash "$1" 2>/dev/null
  then err "$1: command not found"
    return 127
  fi
}

append() {
  local dest="$1"
  local line="$2"
  if ! has fgrep
  then return 1
  elif [[ -z "$(fgrep -lx "$line" "$dest" 2>/dev/null)" ]]
  then printf "%s\n" "$line" >> "$dest"
  fi
  # if [[ ! -e "$dest" ]] || [[ -f "$dest" ]]
  # then printf "%s\n" "$line" >> "$dest"
  # fi
}

erase() {
  local dest="$1"
  local line="$2"
  if ! has fgrep
  then return 1
  elif [[ -z "$(fgrep -Lx "$line" "$dest" 2>/dev/null)" ]]
  then echo sed -e "s/$line//" "$dest"
  sed -e "s/$line//" "$dest"
    # > "$dest"
  fi
}

mkdirs() {
  local dir
  for dir in "$@"
  do [[ -d "$dir" ]] || mkdir -p "$dir"
  done
}

rmdirs() {
  local dir
  for dir in "$@"
  do [[ -d "$dir" ]] && rmdir "$dir"
  done
}

# ACTION="install"
symlink() {
  local path="${1:-$BOOTSTRAP}"
  local target="${2:-$HOME}"
  local opts="${3:-${STOW_OPTS:---verbose}}"

  case "$ACTION" in
    # ''|install) --stow ;;
    delete) opts+=" --delete" ;;
  esac

  # local d
  # for d in {.vim,.tmux}
  # do d="$TARGET/$d"
  #   [[ -d "$d" ]] || mkdir "$d"
  # done

  if [[ -d "$path/os_${OS##*/}" ]]
  then path+=" $path/os_${OS##*/}"
  fi

  local d
  for d in $(find $path -mindepth 1 -maxdepth 1 \
    ! -name '.git' ! -name 'os_*' -type d)
  do local pkg="$(basename $d)"
    local dir="$(dirname $d)"
    local p="$pkg"
    [[ "${dir##*/}" != "${BOOTSTRAP##*/}" ]] && p="${dir##*/}/$pkg"
    case "$ACTION" in
      install) log "Installing $p:" ;;
      delete) log "Removing $p:" ;;
    esac
    if [[ -f "$d/install.sh" ]]
    then unset _install _delete
      source "$d/install.sh"
      case "$ACTION" in
        install) hash _install 2>/dev/null && _install ;;
        delete) hash _delete 2>/dev/null && _delete ;;
      esac
    fi
    stow $opts --ignore=".*.tpl" --ignore="install.sh" \
      --dir "$dir" --target "$target" "$pkg"
    # [[ "$action" == "install" ]] && hash _post 2>/dev/null && _post
  done
}

prompt() {
  local q="$1" # Question
  local d="$2" # Default
  [[ -n "$d" ]] && q+=" (default: $d) "
  local reply
  read -p "$q" -i "$d" -e reply
  if [[ -z "$reply" ]] && [[ -z "$d" ]]
  then prompt "$1" "$2"
  else log "${reply:-$d}"
  fi
}

template() {
  local cmd="sed"
  local src="$1"
  shift
  local dst="$1" # ${1:-$HOME/$(basename "${1%.tpl}")}
  shift
  if [[ ! -f "$src" ]] && [[ ! -L "$src" ]]
  then err "$src: not found"
    return 1
  fi
  if [[ -f "$dst" ]] || [[ -L "$dst" ]]
  # TODO check symlink target
  then err "${dst/$HOME/\~}: already exists"
    return
  fi
  local var
  for var in "$@"
  do local v="${var%%:*}"
    declare $v="$(prompt "${var#*:}" "${!v}")"
    # while [[ -z "${!v}" ]]
    # do log "${var#*:}"; read -e "$v"
    # done
    cmd+=" -e \"s/$v/${!v}/g\""
  done
  eval $cmd "$src" > "$dst"
}

main() {
  while [[ $# -ne 0 ]]
  do case "$1" in
      --) break ;;
      -I|--install|'') ACTION="install"; shift ;;
      -D|--delete) ACTION="delete"; shift ;;
      *) err "$1: invalid argument"; return 1 ;;
    esac
  done
  log "Bootstrap: ${OS##*/}"
  local pkg="$BOOTSTRAP/os_${OS##*/}/packages"
  case "$OS" in
    # darwin) has brew || brew_install && brew update && brew install ... ;;
    android|*linux)
      case "$ACTION" in
        install)
          if has apt-get 2>/dev/null
          then apt-get update -qqy && apt-get install -qqy $(cat "$pkg.apt")
          elif has apt 2>/dev/null
          then apt update -qqy && apt install -qqy $(cat "$pkg.apt")
          else "$OS: unknown package manager"
            return 1
          fi
          ;;
        # delete)
        #   if has apt-get 2>/dev/null
        #   then apt-get remove -qqy $(cat "$pkg.apt")
        #   elif has apt 2>/dev/null
        #   then apt remove -qqy $(cat "$pkg.apt")
        #   else "$OS: unknown package manager"
        #     return 1
        #   fi
        #   ;;
      esac
      ;;
    *) err "$OS: unknown operating system"
      return 1;;
  esac

  if has stow
  then symlink
  fi

  log "Done."
}

main "$@"

unset log
unset err
unset has
unset append
unset erase
unset mkdirs
unset rmdirs
unset symlink
unset template
unset ACTION
unset _install
unset _delete
unset main
