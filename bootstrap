#!/usr/bin/env bash

# set -e
set -o pipefail

ROOT="$(cd "$(dirname "$BASH_SOURCE")"; pwd -P)"

# declare -l OS
# OS="$(uname -o 2>/dev/null || uname -s)"
# OS="$(echo "$OS" | tr '[:upper:]' '[:lower:]')"

for f in $ROOT/lib/*.bash
do source "$f"
done

check() {
  if [[ $# -ne 0 ]] && [[ -n "$1" ]] && [[ "$1" -ne 0 ]]
  then err "${2:-1}: already defined"
    return 1
  fi
}

prompt() {
  local q="$1"
  local d="$2"
  >&2 log "$q"
  local reply
  read -r reply
  # read -p "$q" -i "$d" -e vareply
  log "${reply:-$d}"
}

main() {
  detect_os || return 1
  export RUN=1
  local a action="install"
  local pm=0
  local sync=0
  local update=0
  local verbose=0
  local options="[IDSduv]"
  local pkg=()
  [[ $# -eq 0 ]] # && set -- "-uIS"
  while [[ $# -ne 0 ]]
  do case "$1" in
      --) break ;;
      -d|--dry-run) RUN=0 ;;
      -I|--install) check "$a" "$1" && a="install" && pm=1 && update=1 || return 1 ;;
      -D|--delete) check "$a" "$1" && a="delete" && pm=1 || return 1 ;;
      -S|--sync) check "$sync" "$1" && a="${a:-0}" && sync=1 || return 1 ;;
      -u|--update) update="$(($update + 1))" ;;
      -v|--verbose) verbose="$(($verbose + 1))" ;;
      --*|'') err "$1: illegal option $options"; return 1 ;;
      -*) if [[ "$1" =~ ^-[a-zA-Z][a-zA-Z]+$ ]] && [[ "${1:1:1}" =~ $options ]]
        then set -- "${1:0:2}" "-${1:2}" "${@:2}"; continue
        else err "${1:0:2}: illegal option $options"; return 1
        fi
        ;;
      *) pkg+=("$1") ;; # pkg+=("$@"); break
    esac
    shift
  done
  if [[ -n "$a" ]]
  then action="$a"
  else pm=1; sync=1; update=1
  fi

  log "Bootstrap: $OS"

  local v var val
  if [[ " ${pkg[@]} " == " git " ]]
  then
    for v in "GIT_AUTHOR_NAME:What is your github full name?" \
      "GIT_AUTHOR_USERNAME:What is your github username?" \
      "GIT_AUTHOR_EMAIL:What is your github email?"
    do var="${v%%:*}"; val="$(prompt "${v#*:} (default: ${!var}) " "${!var}")"
      declare $var="$val" && export $var
    done
  fi

  # Package manager
  if [[ "$pm" -ne 0 ]]
  then [[ "$update" -ne 0 ]] && pkg_update
    local path="$ROOT/os_$OS/packages" # ${PKG_CMD%%-*}
    if [[ -f "$path" ]] && [[ "$action" != "delete" ]] # TODO confirm
    then pkg_$action $(cat "$path")
    else err "$path: no such file"
    fi
  fi

  # Sync dotfiles
  if [[ "$sync" -ne 0 ]] && has stow
  then case "$action" in
      install) state="present" ;;
      delete) state="absent" ;;
    esac
   find_stow "$state" "${pkg[@]}"
  fi

  log "Done."
}

# [[ "$0" == "$BASH_SOURCE" ]]
main "$@"
