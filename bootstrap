#!/usr/bin/env bash

# Usage: source bootstrap

# BOOTSTRAP="$(dirname "${BASH_SOURCE}")"
# BOOTSTRAP="$(cd "$(dirname "$0")"; pwd -P)"
BOOTSTRAP="${BOOTSTRAP:-$HOME/storage/shared/termux-config}"

declare -l OS
OS="$(uname -o 2>/dev/null || uname -s)"

log() {
  # printf "%s" "${0##*/}: "
  printf "%s\n" "$@"
}

err() {
  local ret=$?
  >&2 log "$@"
  return $ret
}

has() {
  if ! hash "$1" 2>/dev/null
  then err "$1: command not found"
    return 127
  fi
}

directory() {
  local state="$1"
  shift
  local dir
  for dir in "$@"
  do
    case "$state" in
      present) [[ -d "$dir" ]] || mkdir -p "$dir" ;;
      absent)  [[ -d "$dir" ]] && rmdir "$dir" ;;
    esac
  done
}

lineinfile () {
  local state="$1"
  local file="$2"
  local line="$3"
  if ! has fgrep
  then return 1
  else
    case "$state" in
      present)
        if [[ -z "$(fgrep -lx "$line" "$file" 2>/dev/null)" ]]
        then printf "%s\n" "$line" >> "$file"
        fi
        ;;
      absent)
        if [[ -z "$(fgrep -Lx "$line" "$file" 2>/dev/null)" ]]
        then local tmp="/tmp/${file##*/}.grep"
          eval grep -v \'${line}\' "$file" > "$tmp" && mv "$tmp" "$file"
          # eval sed --in-place \'/${line//\//\\\/}/d\' "$file"
        fi
        ;;
    esac
  fi
}

prompt() {
  local q="$1" # Question
  local d="$2" # Default
  [[ -n "$d" ]] && q+=" (default: $d) "
  local reply
  read -p "$q" -i "$d" -e reply
  if [[ -z "$reply" ]] && [[ -z "$d" ]]
  then prompt "$1" "$2"
  else log "${reply:-$d}"
  fi
}

stow_package() {
  local a="${1:-install}"
  local path="${2:-$BOOTSTRAP}"
  local target="${3:-$HOME}"
  local opts="${4:-${STOW_OPTS:---verbose}}"
  case "$a" in
    # install) --stow ;;
    delete) opts+=" --delete" ;;
  esac
  if [[ -d "$path/os_${OS##*/}" ]]
  then path+=" $path/os_${OS##*/}"
  fi
  local d
  for d in $(find $path -mindepth 1 -maxdepth 1 \
    ! -name '.git' ! -name 'os_*' -type d)
  do local pkg="$(basename $d)"
    local dir="$(dirname $d)"
    local p="$pkg"
    [[ "${dir##*/}" != "${BOOTSTRAP##*/}" ]] && p="${dir##*/}/$pkg"
    case "$a" in
      install) log "Installing $p:" ;;
      delete) log "Removing $p:" ;;
    esac
    unset packages _post_$a
    if [[ -f "$d/$a.sh" ]]
    then source "$d/$a.sh"
      if [[ -n "$packages" ]]
      then echo pkg_$action $packages
        pkg_$action $packages
      fi
    fi
    echo stow $opts --ignore=".*.tpl" --ignore="(install|delete).sh" \
      --dir "$dir" --target "$target" "$pkg"
    stow $opts --ignore=".*.tpl" --ignore="(install|delete).sh" \
      --dir "$dir" --target "$target" "$pkg"
    hash _post_$a 2>/dev/null && _post_$a && unset _post_$a
  done
}

template() {
  # TODO state
  local cmd="sed"
  local src="$1"
  shift
  local dst="$1" # ${1:-$HOME/$(basename "${1%.tpl}")}
  shift
  if [[ ! -f "$src" ]] && [[ ! -L "$src" ]]
  then err "$src: not found"
    return 1
  fi
  if [[ -f "$dst" ]] || [[ -L "$dst" ]]
  # TODO check symlink target
  then err "${dst/$HOME/\~}: already exists"
    return
  fi
  local var
  for var in "$@"
  do local v="${var%%:*}"
    declare $v="$(prompt "${var#*:}" "${!v}")"
    # while [[ -z "${!v}" ]]
    # do log "${var#*:}"; read -e "$v"
    # done
    cmd+=" -e \'s/$v/${!v}/g\'"
  done
  eval $cmd "$src" > "$dst"
}

pkg_install() {
  $PKG_CMD $PKG_UPD && [[ $# -ne 0 ]] && $PKG_CMD $PKG_ADD "$@"
}

pkg_delete() {
  [[ $# -ne 0 ]] && $PKG_CMD $PKG_DEL "$@"
}

main() {
  local action="install"
  while [[ $# -ne 0 ]]
  do case "$1" in
      --) break ;;
      -I|--install|'') action="install"; shift ;;
      -D|--delete) action="delete"; shift ;;
      *) err "$1: invalid argument"; return 1 ;;
    esac
  done

  case "$OSTYPE" in
    # darwin*) ${OSTYPE//[0-9.]/} ;;
    linux*)
      if has apt-get 2>/dev/null
      then PKG_CMD="apt-get"; PKG_ADD="install -qqy"; PKG_DEL="remove -qqy"; PKG_UPD="update -qqy"
      elif has apt 2>/dev/null
      then PKG_CMD="apt"; PKG_ADD="install -qqy"; PKG_DEL="remove -qqy"; PKG_UPD="update -qqy"
      else "$OSTYPE ($OS): unknown package manager"
      fi
      ;;
    *) err "$OSTYPE: unknown operating system"
  esac

  log "Bootstrap: ${OS##*/}"
  local pkg="$(cat "$BOOTSTRAP/os_${OS##*/}/packages.${PKG_CMD%%-*}")"
  case "$OSTYPE" in
    linux*) pkg_$action $pkg ;;
  esac

  if has stow
  then stow_package $action
  fi

  log "Done."
}

main "$@"

unset log
unset err
unset has
unset directory
unset lineinfile
unset prompt
unset stow_package
unset template
unset main
