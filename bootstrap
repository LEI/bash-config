#!/usr/bin/env bash

# Usage: source bootstrap

# BOOTSTRAP="$(dirname "${BASH_SOURCE}")"
# BOOTSTRAP="$(cd "$(dirname "$0")"; pwd -P)"
BOOTSTRAP="${BOOTSTRAP:-$HOME/storage/shared/termux-config}"

declare -l OS
OS="$(uname -o 2>/dev/null || uname -s)"

log() {
  # printf "%s" "${0##*/}: "
  printf "%s\n" "$@"
}

err() {
  local ret=$?
  >&2 log "$@"
  return $ret
}

has() {
  if ! hash "$1" 2>/dev/null
  then err "$1: command not found"
    return 127
  fi
}

directory() {
  local state="$1"
  shift
  local dir
  for dir in "$@"
  do
    case "$state" in
      present) [[ -d "$dir" ]] || mkdir -p "$dir" ;;
      absent) [[ -d "$dir" ]] && rmdir "$dir" ;;
    esac
  done
}

lineinfile () {
  local state="$1"
  local file="$2"
  local line="$3"
  if ! has fgrep
  then return 1
  else
    case "$state" in
      present)
        if [[ -z "$(fgrep -lx "$line" "$file" 2>/dev/null)" ]]
        then printf "%s\n" "$line" >> "$file"
        fi
        ;;
      absent)
        if [[ -z "$(fgrep -Lx "$line" "$file" 2>/dev/null)" ]]
        then local tmp="/tmp/${file##*/}.grep"
          eval grep -v \'${line}\' "$file" > "$tmp" && mv "$tmp" "$file"
          # eval sed --in-place \'/${line//\//\\\/}/d\' "$file"
        fi
        ;;
    esac
  fi
}

template() {
  local src="$1"
  shift
  local dst="$1" # ${1:-$HOME/$(basename "${1%.tpl}")}
  shift
  local vars=("$@")
  if [[ ! -f "$src" ]] && [[ ! -L "$src" ]]
  then err "$src: not found"
    return 1
  fi
  if [[ -f "$dst" ]] || [[ -L "$dst" ]]
  # TODO check symlink target
  then err "${dst/$HOME/\~}: already exists"
    return
  fi
  local opts=()
  while [[ $# -ne 0 ]]
  do
    local var="${1%%:*}"
    local val="${!var}"
    # read -p "${1#*:}" -i "${!var}" -e val
    if [[ -n "$val" ]]
    then opts+=("-e" "'s/$var/$val/g'")
    else err "$var: undefined variable"
    fi
    shift
  done
  eval sed "${opts[@]}" "$src" > "$dst" \
   || err "template: sed "${opts[@]}" "$src""
}

pkg_install() {
  declare -u p="$PKG_CMD"
  if [[ "$update" -ne 0 ]]
  then log "$p: update"
    $PKG_CMD $PKG_UPD && update=0
  fi
  if [[ $# -ne 0 ]]
  then log "$p: install $*"
    $PKG_CMD $PKG_ADD "$@"
  fi
}

pkg_delete() {
  declare -u p="$PKG_CMD"
  if [[ $# -ne 0 ]]
  then log "$p: delete $*"
    $PKG_CMD $PKG_DEL "$@"
  fi
}

pkg_stow() {
  local state="$1"
  shift
  local action="install"
  case "$state" in
    present) action="install" ;;
    absent) action="delete" ;;
  esac
  local stow_opts="${STOW_OPTS:---verbose}"
  case "$action" in
    # install) --stow ;;
    delete) stow_opts+=" --delete" ;;
  esac
  local path="$BOOTSTRAP"
  local target="$HOME"
  local find_args=("$path")
  [[ -d "$path/os_${OS##*/}" ]] && find_args+=("$path/os_${OS##*/}")
  find_args+=("-mindepth" "1" "-maxdepth" "1" "-type" "d" \
    "!" "(" "-name" ".git" "-o" "-name" "os_*" ")")
  local find_opts=()
  while [[ $# -ne 0 ]]
  do [[ -z "$find_opts" ]] && find_opts+=("(") || find_opts+=("-o")
    [[ -n "$1" ]] && find_opts+=("-name" "$1")
    [[ $# -eq 1 ]] && find_opts+=(")")
    shift
  done
  [[ "${#find_opts[@]}" -ne 0 ]] && find_args+=("-a" "${find_opts[@]}")
  # echo "find ${find_args[@]} -print =>" $(find "${find_args[@]}" -print)
  local d
  while read -d '' -r d
  do local p="$(basename $d)"
    local dir="$(dirname $d)"
    declare -u name="$p"
    [[ "${dir##*/}" != "${BOOTSTRAP##*/}" ]] && name="${dir##*/}/$p"
    log "$name: $action..."
    unset packages _post_$action
    [[ -f "$d/$action.sh" ]] && source "$d/$action.sh"
    [[ -f "$d/packages.sh" ]] && source "$d/packages.sh" \
      && [[ -n "$packages" ]] && pkg_$action $packages
    stow $stow_opts --ignore='.*.tpl' --ignore='(install|delete|packages).sh' \
      --dir "$dir" --target "$target" "$p"
    hash _post_$action 2>/dev/null && _post_$action && unset _post_$action
  done < <(find "${find_args[@]}" -print0)
}

main() {
  local action="install"
  local update=0
  local pkg=()
  [[ $# -eq 0 ]] && update=1
  while [[ $# -ne 0 ]]
  do case "$1" in
      --) break ;;
      -I|--install) action="install" ;;
      -D|--delete) action="delete" ;;
      -U|--update) action="install"; update=1 ;;
      -*|'') err "$1: illegal option"; return 1 ;;
      *) pkg+=("$1") ;;
    esac
    shift
  done

  case "$OSTYPE" in
    # darwin*) ${OSTYPE//[0-9.]/} ;;
    linux*)
      if has apt-get 2>/dev/null
      then PKG_CMD="apt-get"; PKG_ADD="install -qqy"; PKG_DEL="remove -qqy"; PKG_UPD="update -qqy"
      elif has apt 2>/dev/null
      then PKG_CMD="apt"; PKG_ADD="install -qqy"; PKG_DEL="remove -qqy"; PKG_UPD="update -qqy"
      else "$OSTYPE ($OS): unknown package manager"
      fi
      ;;
    *) err "$OSTYPE: unknown operating system"
  esac

  log "Bootstrap: ${OS##*/}"

  if [[ "$update" -ne 0 ]]
  then local path="$BOOTSTRAP/os_${OS##*/}/packages.${PKG_CMD}" # ${PKG_CMD%%-*}
    case "$OSTYPE" in
      linux*) pkg_$action $(cat "$path") ;;
    esac
  fi

  if has stow
  then
    case "$action" in
      install) pkg_stow present "${pkg[@]}" ;;
      delete) pkg_stow absent "${pkg[@]}" ;;
    esac
  fi

  log "Done."
}

main "$@"

unset log err has
unset directory lineinfile
unset prompt template
unset pkg_install pkg_delete pkg_stow
unset main
