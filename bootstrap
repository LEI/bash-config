#!/usr/bin/env bash

# Usage: source bootstrap

# BOOTSTRAP="$(dirname "${BASH_SOURCE}")"
# BOOTSTRAP="$(cd "$(dirname "$0")"; pwd -P)"
BOOTSTRAP="${BOOTSTRAP:-$HOME/storage/shared/termux-config}"

# OS="$(echo $(uname -o 2>/dev/null || uname -s) | tr '[:upper:]' '[:lower:]')"
declare -l OS
OS="$(uname -o 2>/dev/null || uname -s)"

log() {
  # printf "%s" "${0##*/}: "
  printf "%s\n" "$@"
}

err() {
  local ret=$?
  >&2 log "$@"
  return $ret
}

has() {
  if ! hash "$1" 2>/dev/null
  then err "$1: command not found"
    return 127
  fi
}

append() {
  local dest="$1"
  local line="$2"
  local dir
  for dir in $(fgrep -x "$line" -L "$dest" &>/dev/null)
  do printf "%s\n" "$line" >> "$dest"
  done
  # if [[ ! -e "$dest" ]] || [[ -f "$dest" ]]
  # then printf "%s\n" "$line" >> "$dest"
  # fi
}

create_dirs() {
  local dir
  for dir in "$@"
  do [[ -d "$dir" ]] || mkdir -p "$dir"
  done
}

# Stow
symlink() {
  local path="${1:-$BOOTSTRAP}"
  local target="${2:-$HOME}"

  # local d
  # for d in {.vim,.tmux}
  # do d="$TARGET/$d"
  #   [[ -d "$d" ]] || mkdir "$d"
  # done

  if [[ -d "$path/os_${OS##*/}" ]]
  then path+=" $path/os_${OS##*/}"
  fi

  local d
  for d in $(find $path -mindepth 1 -maxdepth 1 \
    ! -name '.git' ! -name 'os_*' -type d)
  do local pkg="$(basename $d)"
    local dir="$(dirname $d)"
    local p="$pkg"
    [[ "${dir##*/}" != "${BOOTSTRAP##*/}" ]] && p="${dir##*/}/$pkg"
    log "Installing $p..."
    if [[ -f "$d/install.sh" ]]
    then unset postow
      source "$d/install.sh"
      hash postow 2>/dev/null && postow
    fi
    stow --ignore=".*.tpl" --ignore="install.sh" \
      --dir "$dir" --target "$target" "$pkg" # --verbose
  done
}

template() {
  local cmd="sed"
  local src="$1"
  shift
  local dst="$1" # ${1:-$HOME/$(basename "${1%.tpl}")}
  shift
  if [[ ! -f "$src" ]] && [[ ! -L "$src" ]]
  then err "$src: not found"
    return 1
  fi
  if [[ -f "$dst" ]] || [[ -L "$dst" ]]
  # TODO check symlink target
  then err "${dst/$HOME/\~}: already exists"
    return
  fi
  local var v
  for var in "$@"
  do v="TPL_${var%%:*}"
    declare $v=
    while [[ -z "${!v}" ]]
    do log "${var#*:}"; read -e "$v"
    done
    cmd+=" -e \"s/${var%%:*}/${!v}/g\""
  done
  eval $cmd "$src" > "$dst"
}

main() {
  log "Bootstrapping ${OS##*/}:"
  local pkg="$BOOTSTRAP/os_${OS##*/}/packages"
  local pcmd pfile
  case "$OS" in
    # darwin) has brew || brew_install && brew update && brew install ... ;;
    android|*linux)
      if has apt-get 2>/dev/null
      then pcmd="apt-get"; pfile="apt"
      elif has apt-get 2>/dev/null
      then pcmd="apt"
      else "$OS: unknown package manager"
        return 1
      fi
      $pcmd update -qq -y \
        && [[ -f "$pkg.${pfile:-$pcmd}" ]] \
        && $pcmd install -qq -y $(cat "$pkg.${pfile:-$pcmd}")
      # if has apk && apk update && apk add git perl make automake=1.13.4 autoconf
      # then # http://git.savannah.gnu.org/cgit/stow.git/tree/INSTALL.md
      #   mkdir -p $HOME/src
      #   local stowsrc="$HOME/src/stow"
      #   git clone git://git.savannah.gnu.org/stow.git "$stowsrc"
      #   cd "$stowsrc"
      #   ./configure && make install && make clean
      # fi
      ;;
    *) err "$OS: unknown operating system"
      return 1;;
  esac

  if has stow
  then symlink
  fi

  log "Done."
}

main "$@"

unset log
unset err
unset has
unset append
unset create_dirs
unset symlink
unset template
unset main
