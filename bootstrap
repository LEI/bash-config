#!/usr/bin/env bash

# Usage: source bootstrap

# BOOTSTRAP="$(dirname "${BASH_SOURCE}")"
# BOOTSTRAP="$(cd "$(dirname "$0")"; pwd -P)"
BOOTSTRAP="${BOOTSTRAP:-$HOME/storage/shared/termux-config}"

declare -l OS
OS="$(uname -o 2>/dev/null || uname -s)"

log() {
  # printf "%s" "${0##*/}: "
  printf "%s\n" "$@"
}

err() {
  local ret=$?
  >&2 log "$@"
  return $ret
}

has() {
  if ! hash "$1" 2>/dev/null
  then err "$1: command not found"
    return 127
  fi
}

directory() {
  local state="$1"
  shift
  local dir
  for dir in "$@"
  do
    case "$state" in
      present) [[ -d "$dir" ]] || mkdir -p "$dir" ;;
      absent) [[ -d "$dir" ]] && rmdir "$dir" ;;
    esac
  done
}

lineinfile () {
  local state="$1"
  local file="$2"
  local line="$3"
  if ! has fgrep
  then return 1
  else
    case "$state" in
      present)
        if [[ -z "$(fgrep -lx "$line" "$file" 2>/dev/null)" ]]
        then printf "%s\n" "$line" >> "$file"
        fi
        ;;
      absent)
        if [[ -z "$(fgrep -Lx "$line" "$file" 2>/dev/null)" ]]
        then local tmp="/tmp/${file##*/}.grep"
          eval grep -v \'${line}\' "$file" > "$tmp" && mv "$tmp" "$file"
          # eval sed --in-place \'/${line//\//\\\/}/d\' "$file"
        fi
        ;;
    esac
  fi
}

prompt() {
  local q="$1" # Question
  local d="$2" # Default
  [[ -n "$d" ]] && q+=" (default: $d) "
  local reply
  read -p "$q" -i "$d" -e reply
  if [[ -z "$reply" ]] && [[ -z "$d" ]]
  then prompt "$1" "$2"
  else log "${reply:-$d}"
  fi
}

template() {
  # TODO state
  local cmd="sed"
  local src="$1"
  shift
  local dst="$1" # ${1:-$HOME/$(basename "${1%.tpl}")}
  shift
  if [[ ! -f "$src" ]] && [[ ! -L "$src" ]]
  then err "$src: not found"
    return 1
  fi
  if [[ -f "$dst" ]] || [[ -L "$dst" ]]
  # TODO check symlink target
  then err "${dst/$HOME/\~}: already exists"
    return
  fi
  local var
  for var in "$@"
  do local v="${var%%:*}"
    declare $v="$(prompt "${var#*:}" "${!v}")"
    # while [[ -z "${!v}" ]]
    # do log "${var#*:}"; read -e "$v"
    # done
    cmd+=" -e \'s/$v/${!v}/g\'"
  done
  eval $cmd "$src" > "$dst"
}

pkg_install() {
  echo $PKG_CMD $PKG_UPD / $PKG_CMD $PKG_ADD "$@"
  $PKG_CMD $PKG_UPD && [[ $# -ne 0 ]] && $PKG_CMD $PKG_ADD "$@"
}

pkg_delete() {
  echo $PKG_CMD $PKG_DEL
  [[ $# -ne 0 ]] && $PKG_CMD $PKG_DEL "$@"
}

pkg_stow() {
  local action state="${1:-present}"
  case "$state" in
    present) action="install" ;;
    absent) action="delete" ;;
  esac
  shift
  local pkg=("$@")
  local path=("$BOOTSTRAP") # "${2:-$BOOTSTRAP}"
  local target="$HOME" # "${3:-$HOME}"
  local stow_opts="${STOW_OPTS:---verbose}"
  case "$action" in
    # install) --stow ;;
    delete) stow_opts+=" --delete" ;;
  esac
  [[ -d "${path[0]}/os_${OS##*/}" ]] && path+=("${path[0]}/os_${OS##*/}")
  local d find_opts="! -name '.git' ! -name 'os_*'"
  for d in "${pkg[@]}"
  do [[ -n "$d" ]] && find_opts+=" -name '$d'"
  done
  for d in $(find "${path[@]}" -mindepth 1 -maxdepth 1 $find_opts -type d)
  do local p="$(basename $d)"
    local dir="$(dirname $d)"
    declare -u name="$p"
    [[ "${dir##*/}" != "${BOOTSTRAP##*/}" ]] && name="${dir##*/}/$p"
    log "$name: $action..."
    unset packages _post_$action
    [[ -f "$d/$action.sh" ]] && source "$d/$action.sh"
    [[ -f "$d/packages.sh" ]] && source "$d/packages.sh" \
      && [[ -n "$packages" ]] && pkg_$action $packages
    stow $stow_opts --ignore='.*.tpl' --ignore='(install|delete|packages).sh' \
      --dir "$dir" --target "$target" "$p"
    hash _post_$action 2>/dev/null && _post_$action && unset _post_$action
  done
}

main() {
  local action="install"
  local pkg=()
  while [[ $# -ne 0 ]]
  do case "$1" in
      --) break ;;
      -I|--install|'') action="install"; shift ;;
      -D|--delete) action="delete"; shift ;;
      -*) err "$1: illegal option"; return 1 ;;
      *) pkg+=("$1"); shift ;;
    esac
  done

  case "$OSTYPE" in
    # darwin*) ${OSTYPE//[0-9.]/} ;;
    linux*)
      if has apt-get 2>/dev/null
      then PKG_CMD="apt-get"; PKG_ADD="install -qqy"; PKG_DEL="remove -qqy"; PKG_UPD="update -qqy"
      elif has apt 2>/dev/null
      then PKG_CMD="apt"; PKG_ADD="install -qqy"; PKG_DEL="remove -qqy"; PKG_UPD="update -qqy"
      else "$OSTYPE ($OS): unknown package manager"
      fi
      ;;
    *) err "$OSTYPE: unknown operating system"
  esac

  log "Bootstrap: ${OS##*/}"
  local path="$BOOTSTRAP/os_${OS##*/}/packages.${PKG_CMD}" # ${PKG_CMD%%-*}
  case "$OSTYPE" in
    linux*) pkg_$action $(cat "$path") ;;
  esac

  if has stow
  then
    case "$action" in
      install) pkg_stow present "${pkg[@]}" ;;
      delete) pkg_stow absent "${pkg[@]}" ;;
    esac
  fi

  log "Done."
}

main "$@"

unset log err has
unset directory lineinfile
unset prompt template
unset pkg_install pkg_delete pkg_stow
unset main
