#!/usr/bin/env bash

ROOT="$(cd "$(dirname "$BASH_SOURCE")"; pwd -P)"

# declare -l OS
# OS="$(uname -o 2>/dev/null || uname -s)"
# OS="$(echo "$OS" | tr '[:upper:]' '[:lower:]')"

for f in $ROOT/lib/*.bash
do echo "$f" &&  source "$f"
done

check() {
  echo check "$@"
  if [[ $# -ne 0 ]] && [[ -n "$1" ]]
  then err "$1: action already defined"
    return 1
  fi
}

main() {
  detect_os || return 1
  local a=("install" "delete")
  local action=
  local dryrun=0
  local update=1
  local pkg=()
  local choices="IDUd"
  while [[ $# -ne 0 ]]
  do case "$1" in
      --) break ;;
      -I|--install) check "$action" && action="install" || return 1 ;;
      -D|--delete) check "$action" && action="delete" || return 1 ;;
      -d|--dry-run) dryrun="$(($dryrun + 1))" ;;
      -n|--no-update) update=0 ;;
      --*|'') err "$1: illegal option"; return 1 ;;
      -*) if [[ "$1" =~ ^-[a-zA-Z][a-zA-Z]+$ ]] && [[ "$choices" == *"${1:1:1}"* ]]
        then set -- "${1:0:2}" "-${1:2}" "${@:2}"; continue
        else err "${1:0:2}: illegal option"; return 1
        fi
        ;;
      *) pkg+=("$1") ;; # pkg+=("$@"); break
    esac
    shift
  done
  [[ -z "$action" ]] && action="install"

  log "Bootstrap: $OS"
  [[ "$update" -ne 0 ]] && pkg_update
  local path="$ROOT/os_$OS/packages" # ${PKG_CMD%%-*}
  if [[ -f "$path" ]]
  then pkg_$action $(cat "$path")
  else err "$path: no such file"
  fi

  if has stow
  then
    case "$action" in
      install) find_stow present "${pkg[@]}" ;;
      delete) find_stow absent "${pkg[@]}" ;;
    esac
  fi

  log "Done."
}

# [[ "$0" == "$BASH_SOURCE" ]]
main "$@"
# unset log err has dry_run directory lineinfile prompt template pkg_install pkg_delete pkg_stow main ROOT
